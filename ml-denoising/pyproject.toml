[tool.poetry]
name = "ml_denoising"
version = "0.1.0"
description = "A machine learning package for quantum circuit error mitigation using graph neural networks"
authors = ["Kenny Heitritter <kenny@qbraid.com>"]
readme = "README.md"
packages = [{include = "ml_denoising", from = "src"}]
keywords = ["quantum", "machine-learning", "error-mitigation", "graph-neural-networks", "qiskit"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.10"
torch = "^2.0.0"
torch-geometric = "^2.3.0"
qiskit = "^1.0.0"
qiskit-aer = "^0.15.0"
numpy = "^1.21.0"
matplotlib = "^3.5.0"
scikit-learn = "^1.2.0"
tqdm = "^4.64.0"
pandas = "^1.5.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
jupyter = "^1.0.0"
ipykernel = "^6.20.0"
sphinx = "^5.0.0"
sphinx-rtd-theme = "^1.2.0"
sphinx-autodoc-typehints = "^1.19.0"

[tool.poetry.scripts]
ml-denoising-train = "ml_denoising.train:main"
ml-denoising-generate = "ml_denoising.data_generation:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ml_denoising"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 